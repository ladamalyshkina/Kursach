package com.mytodolist.mytodolist.controllers;

import com.mytodolist.mytodolist.models.ToDoTask;
import com.mytodolist.mytodolist.services.MainService;
import com.mytodolist.mytodolist.repositories.TaskToDoRepository;
import com.mytodolist.mytodolist.services.MainService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import com.mytodolist.mytodolist.models.ToDoTask;
import com.mytodolist.mytodolist.services.MainService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
@Controller
public class ShowTableFromDBController {
    @Autowired
    private TaskToDoRepository repo;
    private final MainService mainService;

    public ShowTableFromDBController(MainService mainService) {
        this.mainService = mainService;
    }

    @GetMapping("/showResults")
    public String showResults(Model model) {
        var taskList = mainService.readAllSortedByID();
        if (!taskList.isEmpty()) {
            model.addAttribute("tasks", taskList);
           var progress =  mainService.countProgress();
            model.addAttribute("progress", progress);
            System.out.println("PROGRESS: " + progress);
        } else {
            System.out.println("Список пустой");
        }
        return "resultsTemplate";
    }


    @PostMapping(value = "/updateTask/{id}")
    public String update(@PathVariable (value = "id") long id, @RequestParam String description, @RequestParam (value = "status", required = false) String status  ) {
        System.out.println("UPDATE");
        ToDoTask task = mainService.findTask(id);
        if (status!=null) {
            task.setStatus(true);
            System.out.println("UPDATE");
            System.out.println("STATUS" + status);
        }
        else {
            task.setStatus(false);
            System.out.println("STATUS IS NULL");
        }
        task.setDescription(description);

        mainService.update(task,id);
        return "redirect:/showResults";
    }


    @PostMapping ("/addNewTask")
    public String add(@RequestParam String description) {
        ToDoTask task = new ToDoTask(description);
        mainService.create(task);
        return "redirect:/showResults";
    }

    @RequestMapping(value = "/deleteTask/{id}") //@RequestBody ToDoTask task
    public String delete(@PathVariable (value = "id") long id  ) {
        System.out.println("DELETE");
        mainService.delete(id);
        return "redirect:/showResults";


    }

    @RequestMapping(value = "/deleteAllTasks") //@RequestBody ToDoTask task
    public String deleteAll( ) {
        mainService.deleteAll();
        return "redirect:/showResults";


    }


}

--
package com.mytodolist.mytodolist.services;

import com.mytodolist.mytodolist.models.ToDoTask;
import com.mytodolist.mytodolist.repositories.TaskToDoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MainService {
    private  final  TaskToDoRepository taskToDoRepository;

    @Autowired
    public MainService(TaskToDoRepository taskToDoRepository) {
        this.taskToDoRepository = taskToDoRepository;
    }


    public void create(ToDoTask task) {
        taskToDoRepository.save(task);
    }


    public  List<ToDoTask> readAll() {
        return taskToDoRepository.findAll();
    }
    public List<ToDoTask> readAllSortedByID() {
        System.out.println("READ SORTED BY DATE");
        return taskToDoRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
    }

    public void update(ToDoTask task, long id) {
        if (taskToDoRepository.existsById(id)) {
            task.setId(id);
            taskToDoRepository.save(task);

        }

    }
    public ToDoTask findTask(long id)
    {
      return taskToDoRepository.findById(id).orElseThrow();
    }
    public double countProgress()
    {
     long tasksCount = taskToDoRepository.count();
     System.out.println("ALL TASKS: " + tasksCount);
     if (tasksCount !=0) {

        var completedTasks = taskToDoRepository.findAllByStatus(true);
        System.out.println("ONLY TRUE: " + completedTasks.size());
        double percentCompleted = ((double) completedTasks.size() / tasksCount) * 100;
         return Math.round(percentCompleted * 100.0) / 100.0;
    }
    else {
        return 0.0;
    }

}
    public void deleteAll() {
      taskToDoRepository.deleteAll();
    }

    public void delete(long id) {
        if (taskToDoRepository.existsById(id)) {
            taskToDoRepository.deleteById(id);
        }
    }
}
